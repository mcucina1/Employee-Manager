/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 26 20:05:11 GMT 2023
 */

package edu.colostate.cs415.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.colostate.cs415.dto.ProjectDTO;
import edu.colostate.cs415.model.Project;
import edu.colostate.cs415.model.ProjectSize;
import edu.colostate.cs415.model.ProjectStatus;
import edu.colostate.cs415.model.Qualification;
import edu.colostate.cs415.model.Worker;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Project_ESTest extends Project_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project("~c]7r#~7sY@vn8T", linkedHashSet0, projectSize0);
      Qualification qualification0 = new Qualification("~c]7r#~7sY@vn8T");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("~c]7r#~7sY@vn8T", linkedHashSet0, 890.42096085);
      project0.addWorker(worker0);
      Set<Worker> set0 = project0.getWorkers();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project("~c]7r#~7sY@vn8T", linkedHashSet0, projectSize0);
      Qualification qualification0 = new Qualification("~c]7r#~7sY@vn8T");
      linkedHashSet0.add(qualification0);
      Set<Qualification> set0 = project0.getRequiredQualifications();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      linkedHashSet0.add((Qualification) null);
      Project project0 = new Project("[dZP#H7C=fVy4", linkedHashSet0, projectSize0);
      // Undeclared exception!
      try { 
        project0.toDTO();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project(":", linkedHashSet0, projectSize0);
      project0.addWorker((Worker) null);
      // Undeclared exception!
      try { 
        project0.getMissingQualifications();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project(":", linkedHashSet0, projectSize0);
      Qualification qualification0 = new Qualification(":");
      project0.addQualification(qualification0);
      Set<Qualification> set0 = project0.getMissingQualifications();
      assertTrue(set0.contains(qualification0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project("~c]7r#~7sY@vn8T", linkedHashSet0, projectSize0);
      Qualification qualification0 = new Qualification("~c]7r#~7sY@vn8T");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("~c]7r#~7sY@vn8T", linkedHashSet0, 890.42096085);
      project0.addWorker(worker0);
      Set<Qualification> set0 = project0.getMissingQualifications();
      assertFalse(set0.contains(qualification0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("[Project.java] equals(): Cannot compare to null.", linkedHashSet0, projectSize0);
      Set<Worker> set0 = project0.getWorkers();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project(":", linkedHashSet0, projectSize0);
      project0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project("~c]7r#~7sY@vn8T", linkedHashSet0, projectSize0);
      Set<Qualification> set0 = project0.getRequiredQualifications();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project("~cf]7r#~7sYrvn8T", linkedHashSet0, projectSize0);
      LinkedHashSet<Qualification> linkedHashSet1 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("~cf]7r#~7sYrvn8T");
      linkedHashSet1.add(qualification0);
      Worker worker0 = new Worker("~cf]7r#~7sYrvn8T", linkedHashSet1, 4474.55535027);
      boolean boolean0 = project0.isHelpful(worker0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project(" Tlm!9Ij8(d@<{3^2", linkedHashSet0, projectSize0);
      // Undeclared exception!
      try { 
        project0.isHelpful((Worker) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Project.java] isHelpful(): Argument cannot be null
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project("~c]F7rM#~sY@vn8T", linkedHashSet0, projectSize0);
      Qualification qualification0 = new Qualification("~c]F7rM#~sY@vn8T");
      project0.addQualification(qualification0);
      Worker worker0 = new Worker("~c]F7rM#~sY@vn8T", linkedHashSet0, 890.42096085);
      boolean boolean0 = project0.isHelpful(worker0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project("~cf]7r#~7sYrvn8T", linkedHashSet0, projectSize0);
      Qualification qualification0 = new Qualification("~cf]7r#~7sYrvn8T");
      project0.addQualification(qualification0);
      ProjectDTO projectDTO0 = project0.toDTO();
      assertEquals(ProjectSize.SMALL, projectDTO0.getSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project("~c]F7rM#~sY@vn8T", linkedHashSet0, projectSize0);
      Qualification qualification0 = new Qualification("~c]F7rM#~sY@vn8T");
      project0.addQualification(qualification0);
      Worker worker0 = new Worker("~c]F7rM#~sY@vn8T", linkedHashSet0, 890.42096085);
      project0.addWorker(worker0);
      ProjectDTO projectDTO0 = project0.toDTO();
      assertEquals(ProjectSize.SMALL, projectDTO0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("r", linkedHashSet0, projectSize0);
      // Undeclared exception!
      try { 
        project0.addQualification((Qualification) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Status cannot be set to null.
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("[Project.java] equals(): Cannot compare to null.", linkedHashSet0, projectSize0);
      // Undeclared exception!
      try { 
        project0.setStatus((ProjectStatus) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Status cannot be set to null.
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("OF)#XX1/_ZI&NP", linkedHashSet0, projectSize0);
      ProjectStatus projectStatus0 = ProjectStatus.PLANNED;
      project0.setStatus(projectStatus0);
      assertEquals(ProjectSize.BIG, project0.getSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project("~cf]7r#~7sYrvn8T", linkedHashSet0, projectSize0);
      Project project1 = new Project("~cf]7r#~7sYrvn8T", linkedHashSet0, projectSize0);
      boolean boolean0 = project0.equals(project1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project("~cf]7r#~7sYrvn8T", linkedHashSet0, projectSize0);
      boolean boolean0 = project0.equals(project0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("OF)#XX1/_ZI&NP", linkedHashSet0, projectSize0);
      // Undeclared exception!
      try { 
        project0.equals((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Project.java] equals(): Cannot compare to null.
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project("~c]F7rM#~sY@vn8T", linkedHashSet0, projectSize0);
      Qualification qualification0 = new Qualification("~c]F7rM#~sY@vn8T");
      boolean boolean0 = project0.equals(qualification0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Project project0 = null;
      try {
        project0 = new Project("+", linkedHashSet0, (ProjectSize) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No constructor fields may be null.
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = null;
      try {
        project0 = new Project("X']+Jl", (Set<Qualification>) null, projectSize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No constructor fields may be null.
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = null;
      try {
        project0 = new Project("", (Set<Qualification>) null, projectSize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No constructor fields may be null.
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = null;
      try {
        project0 = new Project((String) null, linkedHashSet0, projectSize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No constructor fields may be null.
         //
         verifyException("edu.colostate.cs415.model.Project", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project("~cf]7r#~7sYrvn8T", linkedHashSet0, projectSize0);
      ProjectStatus projectStatus0 = project0.getStatus();
      assertEquals(ProjectStatus.PLANNED, projectStatus0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("OF)#XX1/_ZI&NP", linkedHashSet0, projectSize0);
      ProjectSize projectSize1 = project0.getSize();
      assertEquals(ProjectSize.BIG, projectSize1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("OF)#XX1/_ZI&NP", linkedHashSet0, projectSize0);
      String string0 = project0.getName();
      assertEquals("OF)#XX1/_ZI&NP", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("OF)#XX1/_ZI&NP", linkedHashSet0, projectSize0);
      String string0 = project0.toString();
      assertEquals("OF)#XX1/_ZI&NP:0:PLANNED", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project("~cf]7r#~7sYrvn8T", linkedHashSet0, projectSize0);
      project0.removeAllWorkers();
      assertEquals("~cf]7r#~7sYrvn8T", project0.getName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project(":", linkedHashSet0, projectSize0);
      Qualification qualification0 = new Qualification(":");
      project0.addQualification(qualification0);
      Worker worker0 = new Worker("ACTIVE", linkedHashSet0, 0.0);
      project0.removeWorker(worker0);
      assertEquals(":", project0.getName());
  }
}
