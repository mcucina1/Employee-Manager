/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 26 20:04:07 GMT 2023
 */

package edu.colostate.cs415.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.colostate.cs415.dto.WorkerDTO;
import edu.colostate.cs415.model.Project;
import edu.colostate.cs415.model.ProjectSize;
import edu.colostate.cs415.model.ProjectStatus;
import edu.colostate.cs415.model.Qualification;
import edu.colostate.cs415.model.Worker;
import java.util.LinkedHashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Worker_ESTest extends Worker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("JgW+03(-2}dnG=P");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("JgW+03(-2}dnG=P", linkedHashSet0, 1.7025694960134352);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("'<%otr", linkedHashSet0, projectSize0);
      worker0.addProject(project0);
      Project project1 = new Project("vY", linkedHashSet0, projectSize0);
      worker0.addProject(project1);
      Project project2 = new Project("8:oFvhvL(Rcz/K\"", linkedHashSet0, projectSize0);
      Project project3 = new Project("JgW+03(-2}dnG=P", linkedHashSet0, projectSize0);
      worker0.addProject(project3);
      worker0.addProject(project2);
      Project project4 = new Project("LSS'C", linkedHashSet0, projectSize0);
      worker0.addProject(project4);
      boolean boolean0 = worker0.isAvailable();
      assertFalse(boolean0);
      assertEquals(1.7025694960134352, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("JgW+03(-2}dnG=P");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("JgW+03(-2}dnG=P", linkedHashSet0, 1.7025694960134352);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("'<%otr", linkedHashSet0, projectSize0);
      worker0.addProject(project0);
      Project project1 = new Project("8:oFvhvL(Rcz/K\"", linkedHashSet0, projectSize0);
      Project project2 = new Project("JgW+03(-2}dnG=P", linkedHashSet0, projectSize0);
      worker0.addProject(project2);
      worker0.addProject(project1);
      Project project3 = new Project("L-L'C", linkedHashSet0, projectSize0);
      boolean boolean0 = worker0.willOverload(project3);
      assertFalse(boolean0);
      assertEquals(1.7025694960134352, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("SUSPENDED");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("'iJ{:~", linkedHashSet0, 516.0);
      worker0.setSalary(516.0);
      assertEquals(516.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("\",s9IWImB");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("Z,q}Na+", linkedHashSet0, 0.0);
      WorkerDTO workerDTO0 = worker0.toDTO();
      assertEquals(0, workerDTO0.getWorkload());
      assertEquals(0.0, workerDTO0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("\",s9IWImB");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("Z,q}Na+", linkedHashSet0, 0.0);
      double double0 = worker0.getSalary();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("[Worker.java] equals(): Cannot compare to null.");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("Qualifications must not be null or empty.", linkedHashSet0, 1.0);
      LinkedHashSet<Worker> linkedHashSet1 = new LinkedHashSet<Worker>();
      linkedHashSet0.retainAll(linkedHashSet1);
      worker0.getQualifications();
      assertEquals(1.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>(1318, 1.0F);
      Qualification qualification0 = new Qualification("{.");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("]D[}d0awCOq;1X]oD1N", linkedHashSet0, 1318);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("]D[}d0awCOq;1X]oD1N:0:2:0", linkedHashSet0, projectSize0);
      worker0.addProject(project0);
      worker0.getProjects();
      assertEquals(1318.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("F m6/j&$D/fy");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("v", linkedHashSet0, 3357.4682875);
      // Undeclared exception!
      try { 
        worker0.willOverload((Project) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      Worker worker0 = new Worker("2ilDIYlm1n7", linkedHashSet0, 2658.5763273);
      // Undeclared exception!
      try { 
        worker0.toDTO();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("J8gW03(-2}$d/nG=P");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("J8gW03(-2}$d/nG=P", linkedHashSet0, 1.0);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("J8gW03(-2}$d/nG=P", linkedHashSet0, projectSize0);
      worker0.addProject(project0);
      int int0 = worker0.getWorkload();
      assertEquals(1.0, worker0.getSalary(), 0.01);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>(1318, 1.0F);
      Qualification qualification0 = new Qualification("{.");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("]D[}d0awCOq;1X]oD1N", linkedHashSet0, 1318);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("]D[}d0awCOq;1X]oD1N:0:2:0", linkedHashSet0, projectSize0);
      ProjectStatus projectStatus0 = ProjectStatus.FINISHED;
      project0.setStatus(projectStatus0);
      worker0.addProject(project0);
      int int0 = worker0.getWorkload();
      assertEquals(0, int0);
      assertEquals(1318.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("[Worker.java] equals(): Cannot compare to null.");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("Qualifications must not be null or empty.", linkedHashSet0, 1.0);
      int int0 = worker0.getWorkload();
      assertEquals(1.0, worker0.getSalary(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("[Worker.java] equals(): Cannot compare to null.");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("Qualifications must not be null or empty.", linkedHashSet0, 1.0);
      worker0.hashCode();
      assertEquals(1.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("JgW+03(-2}dnG=P");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("JgW+03(-2}dnG=P", linkedHashSet0, 1.7025694960134352);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("'<%otr", linkedHashSet0, projectSize0);
      worker0.addProject(project0);
      Project project1 = new Project("8:oFvhvL(Rcz/K\"", linkedHashSet0, projectSize0);
      Project project2 = new Project("JgW+03(-2}dnG=P", linkedHashSet0, projectSize0);
      worker0.addProject(project2);
      worker0.addProject(project1);
      Project project3 = new Project("LSS'C", linkedHashSet0, projectSize0);
      worker0.addProject(project3);
      boolean boolean0 = worker0.isAvailable();
      assertFalse(boolean0);
      assertEquals(1.7025694960134352, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("JgW+03(-2}dnG=P");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("JgW+03(-2}dnG=P", linkedHashSet0, 1.7025694960134352);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("2r@f>Y}[#j", linkedHashSet0, projectSize0);
      worker0.addProject(project0);
      ProjectSize projectSize1 = ProjectSize.BIG;
      Project project1 = new Project("'<%otr", linkedHashSet0, projectSize1);
      worker0.addProject(project1);
      Project project2 = new Project("8:oFvhvL(Rcz/K\"", linkedHashSet0, projectSize1);
      Project project3 = new Project("JgW+03(-2}dnG=P", linkedHashSet0, projectSize1);
      worker0.addProject(project3);
      worker0.addProject(project2);
      Project project4 = new Project("JgW+03(-2}dnG=P:4:1:1", linkedHashSet0, projectSize1);
      boolean boolean0 = worker0.willOverload(project4);
      assertTrue(boolean0);
      assertEquals(1.7025694960134352, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("J8gW03(-2}$d/nG=P");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("J8gW03(-2}$d/nG=P", linkedHashSet0, 1.0);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("8:oFvhvL(Rcz/K\"", linkedHashSet0, projectSize0);
      worker0.addProject(project0);
      boolean boolean0 = worker0.willOverload(project0);
      assertFalse(boolean0);
      assertEquals(1.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("JgW+03(-2}dnG=P");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("JgW+03(-2}dnG=P", linkedHashSet0, 1.7025694960134352);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("2r@f>Y}[#j", linkedHashSet0, projectSize0);
      boolean boolean0 = worker0.willOverload(project0);
      assertFalse(boolean0);
      assertEquals(1.7025694960134352, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("[Worker.java] equals(): Cannot compare to null.");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("Qualifications must not be null or empty.", linkedHashSet0, 1.0);
      ProjectSize projectSize0 = ProjectSize.SMALL;
      Project project0 = new Project("[Worker.java] equals(): Cannot compare to null.", linkedHashSet0, projectSize0);
      worker0.addProject(project0);
      int int0 = worker0.getWorkload();
      assertEquals(1, int0);
      assertEquals(1.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("J8gW03(-2}$d/nG=P");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("J8gW03(-2}$d/nG=P", linkedHashSet0, 1.0);
      ProjectSize projectSize0 = ProjectSize.MEDIUM;
      Project project0 = new Project("8:oFvhvL(Rcz/K\"", linkedHashSet0, projectSize0);
      worker0.addProject(project0);
      int int0 = worker0.getWorkload();
      assertEquals(2, int0);
      assertEquals(1.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>(1318, 1.0F);
      Qualification qualification0 = new Qualification("{.");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("]D[}d0awCOq;1X]oD1N", linkedHashSet0, 1318);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("]D[}d0awCOq;1X]oD1N:0:2:0", linkedHashSet0, projectSize0);
      ProjectStatus projectStatus0 = ProjectStatus.FINISHED;
      project0.setStatus(projectStatus0);
      worker0.addProject(project0);
      WorkerDTO workerDTO0 = worker0.toDTO();
      assertEquals(1318.0, workerDTO0.getSalary(), 0.01);
      assertEquals(0, workerDTO0.getWorkload());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>(1287, 1.0F);
      Qualification qualification0 = new Qualification("{.");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("]D[}d0awCOq;1X]oD1N", linkedHashSet0, 1287);
      boolean boolean0 = worker0.isAvailable();
      assertEquals(1287.0, worker0.getSalary(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("]o[3y7PPN");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("]o[3y7PPN", linkedHashSet0, 1598.85878673);
      // Undeclared exception!
      try { 
        worker0.addProject((Project) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add a null project.
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>(1287, 1.0F);
      Qualification qualification0 = new Qualification("{.");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("]D[}d0awCOq;1X]oD1N", linkedHashSet0, 1287);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("]D[}d0awCOq;1X]oD1N:0:2:0", linkedHashSet0, projectSize0);
      worker0.addProject(project0);
      WorkerDTO workerDTO0 = worker0.toDTO();
      assertEquals(3, workerDTO0.getWorkload());
      assertEquals(1287.0, workerDTO0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("[Worker.java] equals(): Cannot compare to null.");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("Qualifications must not be null or empty.", linkedHashSet0, 1.0);
      LinkedHashSet<Worker> linkedHashSet1 = new LinkedHashSet<Worker>();
      linkedHashSet0.retainAll(linkedHashSet1);
      worker0.addQualification(qualification0);
      assertTrue(linkedHashSet0.contains(qualification0));
      assertEquals(1, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      linkedHashSet0.add((Qualification) null);
      Worker worker0 = new Worker("3I5|`1ZWp&Qvl0G3USP", linkedHashSet0, 1123.48046);
      // Undeclared exception!
      try { 
        worker0.addQualification((Qualification) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add a null qualification.
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>(1287, 1.0F);
      Qualification qualification0 = new Qualification("{.");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("]D[}d0awCOq;1X]oD1N", linkedHashSet0, 1287);
      worker0.addQualification(qualification0);
      assertEquals(1287.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>(1318, 1318);
      Qualification qualification0 = new Qualification("]o_yPPN");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("]o_yPPN", linkedHashSet0, 1318);
      // Undeclared exception!
      try { 
        worker0.setSalary((-58.62628511));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Salary must not be negative.
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>(1287, 1.0F);
      Qualification qualification0 = new Qualification("{.");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("]D[}d0awCOq;1X]oD1N", linkedHashSet0, 1287);
      worker0.setSalary(0.0);
      assertEquals(0.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("]1[3y7PuN");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("]1[3y7PuN", linkedHashSet0, 1598.65648029701);
      Worker worker1 = new Worker("]1[3y7PuN", linkedHashSet0, 12);
      worker0.equals(worker1);
      assertEquals(12.0, worker1.getSalary(), 0.01);
      assertEquals(1598.65648029701, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("]1[3y7PuN");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("]1[3y7PuN", linkedHashSet0, 1598.65648029701);
      boolean boolean0 = worker0.equals(worker0);
      assertEquals(1598.65648029701, worker0.getSalary(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("JgW+03(-2}dnGzP");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("JgW+03(-2}dnGzP", linkedHashSet0, 1.7025694960134352);
      // Undeclared exception!
      try { 
        worker0.equals((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // [Worker.java] equals(): Cannot compare to null.
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("J8gW03(-2}$d/nG=P");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("J8gW03(-2}$d/nG=P", linkedHashSet0, 1.0);
      boolean boolean0 = worker0.equals("J8gW03(-2}$d/nG=P");
      assertEquals(1.0, worker0.getSalary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("aAV*");
      linkedHashSet0.add(qualification0);
      Worker worker0 = null;
      try {
        worker0 = new Worker("aAV*", linkedHashSet0, (-1.3920642784635169));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Salary must not be negative.
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Worker worker0 = null;
      try {
        worker0 = new Worker("{P4", linkedHashSet0, (-475.57233791556644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Qualifications must not be null or empty.
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Worker worker0 = null;
      try {
        worker0 = new Worker("edu.colostate.cs415.dto.WorkerDTO", (Set<Qualification>) null, 1298.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Qualifications must not be null or empty.
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Worker worker0 = null;
      try {
        worker0 = new Worker("", (Set<Qualification>) null, (-0.5435325667424361));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name must not be empty or null.
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Worker worker0 = null;
      try {
        worker0 = new Worker((String) null, (Set<Qualification>) null, 3011.6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Name must not be empty or null.
         //
         verifyException("edu.colostate.cs415.model.Worker", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("]1[3y7PuN");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("]1[3y7PuN", linkedHashSet0, 1598.65648029701);
      worker0.getProjects();
      assertEquals(1598.65648029701, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("J8gW03(-2}$d/nG=P");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("J8gW03(-2}$d/nG=P", linkedHashSet0, 1.0);
      worker0.getName();
      assertEquals(1.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>(1287, 1.0F);
      Qualification qualification0 = new Qualification("{.");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("]D[}d0awCOq;1X]oD1N", linkedHashSet0, 1287);
      String string0 = worker0.toString();
      assertEquals("]D[}d0awCOq;1X]oD1N:0:1:1287", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("]1[3y7PuN");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("]1[3y7PuN", linkedHashSet0, 1598.65648029701);
      ProjectSize projectSize0 = ProjectSize.BIG;
      Project project0 = new Project("]1[3y7PuN", linkedHashSet0, projectSize0);
      worker0.removeProject(project0);
      assertEquals(1598.65648029701, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>(1287, 1.0F);
      Qualification qualification0 = new Qualification("{.");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("]D[}d0awCOq;1X]oD1N", linkedHashSet0, 1287);
      worker0.getQualifications();
      assertEquals(1287.0, worker0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedHashSet<Qualification> linkedHashSet0 = new LinkedHashSet<Qualification>();
      Qualification qualification0 = new Qualification("F m6/j&$D/fy");
      linkedHashSet0.add(qualification0);
      Worker worker0 = new Worker("v", linkedHashSet0, 3357.4682875);
      double double0 = worker0.getSalary();
      assertEquals(3357.4682875, double0, 0.01);
  }
}
